/*
 * Copyright (C) 2016 Pajato Technologies, Inc.
 *
 * This file is part of Pajato GameChat.

 * GameChat is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
 *
 * GameChat is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.

 * You should have received a copy of the GNU General Public License along with GameChat.  If not, see
 * <http://www.gnu.org/licenses/>.
 */
package com.pajato.android.gamechat.game;

import android.os.Bundle;
import android.support.design.widget.Snackbar;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentActivity;
import android.view.View;

import com.pajato.android.gamechat.R;

import java.util.ArrayList;

/**
 * Manages the game related aspects of the GameChat application. These include the creation of new
 * game instances, notifications, and game settings.
 *
 * @author Bryan Scott
 */
public enum GameManager {
    instance;

    // Public Class Constants
    public static final int INIT_INDEX = 0;
    public static final int SETTINGS_INDEX = 1;
    public static final int TTT_LOCAL_INDEX = 2;
    public static final int TTT_ONLINE_INDEX = 3;
    public static final int CHECKERS_INDEX = 4;
    public static final int CHESS_INDEX = 5;
    public static final int TOTAL_FRAGMENTS = 6;

    public static final String GAME_KEY = "gameInit";

    // Public Instance Variables
    /** The Current Match History */
    public ArrayList<String> mInstructions = new ArrayList<>();

    // Private instance variables
    /** Contains the list of all the fragments. */
    private Fragment[] fragmentList = new Fragment[TOTAL_FRAGMENTS];
    /** Contains the fragment index */
    private int currentFragment;

    // Public instance methods

    public void init(final FragmentActivity context) {
        currentFragment = -1;
        mInstructions.clear();
        fragmentList = new Fragment[TOTAL_FRAGMENTS];

        // Set the current fragment to our default.
        fragmentList[INIT_INDEX] = new InitialFragment();
        sendNewGame(INIT_INDEX, context);
    }

    /**
     * Creates a Snackbar notification based on the parameters requested.
     *
     * @param view      Specifies the view to contain the Snackbar, as specified by Snackbar.make()
     * @param output    Specifies the string output that will be contained in the Snackbar.
     * @param color     Specifies a color of the Snackbar, as generated by ContextCompat.getColor()
     * @param endedGame Specifies whether or not the new game action should be created.
     */
    public void generateSnackbar(final View view, final String output, final int color,
                                 final boolean endedGame) {
        Snackbar notification;
        // If the game is ended, we will generate an action for the Snackbar that starts a new game.
        if(endedGame) {
            notification = Snackbar.make(view, output, Snackbar.LENGTH_INDEFINITE);
            notification.setAction("Play Again!", new View.OnClickListener() {
                @Override public void onClick(View v) {
                    // Initiate a new TicTacToe game.
                    String msg;
                    if(getCurrentFragmentIndex() == TTT_LOCAL_INDEX) {
                        msg = (((LocalTTTFragment) getFragment(TTT_LOCAL_INDEX)).mTurn ? "X" : "O")
                                + "\n" + "New Game";
                        sendMessage(msg, TTT_LOCAL_INDEX);
                    } else if (getCurrentFragmentIndex() == TTT_ONLINE_INDEX) {
                        msg = (((TTTFragment) getFragment(TTT_ONLINE_INDEX)).mTurn ? "X" : "O")
                                + "\n" + "New Game";
                        sendMessage(msg, TTT_ONLINE_INDEX);
                    } else if (getCurrentFragmentIndex() == CHECKERS_INDEX) {
                        msg = (((CheckersFragment) getFragment(CHECKERS_INDEX)).mTurn ?
                                "Blue" : "Yellow") + "\n" + "New Game";
                        sendMessage(msg, CHECKERS_INDEX);
                    }
                }
            });
        // If the game hasn't ended, we do not need to make an action for the snackbar.
        } else {
            notification = Snackbar.make(view, output, Snackbar.LENGTH_SHORT);
        }
        // If the color is specified, we can set it to be a non-default color.
        if(color != -1) {
            notification.getView().setBackgroundColor(color);
        }
        notification.show();
    }

    /**
     * A getter for the current fragment's index.
     *
     * @return the index of the current fragment.
     */
    public int getCurrentFragmentIndex() {
        return currentFragment;
    }

    /**
     * Gets a fragment by their index.
     *
     * @return The current fragment loaded up in our fragment container.
     */
    public Fragment getFragment(int index) {
        return fragmentList[index];
    }

    /**
     * A placeholder method for a message handler / event coordinator to be implemented at a later
     * time. Currently, sendMessage sends a string to the current individual game fragment (for
     * example, TTTFragment) that it then interprets into a move.
     *
     * @param msg the message to transmit to the message handler.
     * @param fragmentIndex The index of the fragment that will handle the message.
     */
    public void sendMessage(final String msg, final int fragmentIndex) {
        mInstructions.add(msg);
        //TODO: replace this with an implemented event handling system.
        switch(fragmentIndex) {
            default:
                break;
            case GameManager.TTT_LOCAL_INDEX:
                ((LocalTTTFragment) GameManager.instance.getFragment(GameManager.TTT_LOCAL_INDEX))
                        .messageHandler(msg);
                break;
            case GameManager.TTT_ONLINE_INDEX:
                ((TTTFragment) GameManager.instance.getFragment(GameManager.TTT_ONLINE_INDEX))
                        .messageHandler(msg);
                break;
            case GameManager.CHECKERS_INDEX:
                ((CheckersFragment) GameManager.instance.getFragment(GameManager.CHECKERS_INDEX))
                        .messageHandler(msg);
                break;
            case GameManager.CHESS_INDEX:
                ((ChessFragment) GameManager.instance.getFragment(GameManager.CHESS_INDEX))
                        .messageHandler(msg);
        }
    }

    /**
     * A placeholder method for a message handler / event coordinator to be implemented at a later
     * time. Currently, sendNewGame clears the match history contained in GameManager, then sends
     * out a new game message using SendMessage.
     *
     * @param msg The message to transmit to the message handler.
     * @param fragmentIndex The index of the fragment that will handle the message.
     */
    public void sendNewGame(final int fragmentIndex, final FragmentActivity context, final String msg) {
        mInstructions.clear();
        setCurrentFragment(fragmentIndex, context, msg);
    }

    /**
     * Sets and loads the fragment indicated by the fragmentIndex parameter into the fragment
     * container as provided by the context parameter.
     *
     * @param fragmentIndex indicates the requested fragment
     * @param context provides access to the fragment's parent view.
     */
    public boolean sendNewGame(final int fragmentIndex, final FragmentActivity context) {
        mInstructions.clear();
        return setCurrentFragment(fragmentIndex, context, null);
    }

    // Protected instance methods

    // Private instance methods

    /**
     * A private method that sets and loads the fragment indicated by the fragmentIndex parameter
     * into the fragment container as provided by the context parameter. Optionally, if the
     * fragmendIndex parameter matches up with our current fragment, a message will  be sent to the
     * current fragment indicating a new game should be created.
     *
     * @param fragmentIndex indicates the requested fragment
     * @param context provides access to the fragment's parent view.
     * @param msg (optional) sent to our current fragment.
     * @return true if the fragment index suggested is within our rights to access, false otherwise.
     */
    public boolean setCurrentFragment(final int fragmentIndex, final FragmentActivity context,
                                      final String msg) {
        if(fragmentIndex < TOTAL_FRAGMENTS && fragmentIndex > -1) {
            if (fragmentIndex != getCurrentFragmentIndex()) {
                if(fragmentList[fragmentIndex] == null) {
                    switch(fragmentIndex) {
                        case SETTINGS_INDEX: fragmentList[SETTINGS_INDEX] = new SettingsFragment();
                            break;
                        case TTT_LOCAL_INDEX: fragmentList[TTT_LOCAL_INDEX] = new LocalTTTFragment();
                            break;
                        case TTT_ONLINE_INDEX: fragmentList[TTT_ONLINE_INDEX] = new TTTFragment();
                            break;
                        case CHECKERS_INDEX: fragmentList[CHECKERS_INDEX] = new CheckersFragment();
                            break;
                        case CHESS_INDEX: fragmentList[CHESS_INDEX] = new ChessFragment();
                            break;
                    }
                }
                // Set up the new fragment in our fragment container.
                currentFragment = fragmentIndex;
                fragmentList[fragmentIndex].setArguments(context.getIntent().getExtras());
                if(msg != null) {
                    Bundle newGame = new Bundle();
                    newGame.putString(GAME_KEY, msg);
                    fragmentList[fragmentIndex].setArguments(newGame);
                }
                context.getSupportFragmentManager().beginTransaction()
                        .replace(R.id.game_pane_fragment_container, fragmentList[fragmentIndex])
                        .commit();
                return true;
            } else if(msg != null) {
                sendMessage(msg, fragmentIndex);
                return true;
            }
        }
        return false;
    }

}
